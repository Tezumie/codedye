!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).CodeDye={})}(this,(function(t){"use strict";const e=new Map,n=new Map;function s(t){for(const e of t.classList)if(e.startsWith("language-"))return e.slice(9);return"js"}function r(t="js"){if(e.has(t))return e.get(t);const s=n.get(t);if("function"!=typeof s)throw new Error(`Language "${t}" not registered`);const r=s();return e.set(t,r),r}const o={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},i=/[&<>"']/g;function a(t=""){return t.replace(i,(t=>o[t]))}class l{constructor(t){this.rules=t,this.stateStack=[],this.bracketDepth=0,this._regexCache=new Map,this._compileAllRules(),this.setState("root")}setState(t){this.currentState=t}pushState(t){this.stateStack.push(this.currentState),this.setState(t)}popState(){return this.stateStack.length&&this.setState(this.stateStack.pop()),this.currentState}_compileAllRules(){this._compiled={};const t=this.rules.tokenizer||{};for(const[e,n]of Object.entries(t))this._compiled[e]=n.map((t=>{if(t.include)return{include:t.include.replace(/^@/,"")};const[e,n,s]=t;return{re:this._expandRegex(e,!0),outSpec:n,nextHint:s}}))}_expandRegex(t,e=!1){const n=t.toString()+(e?"y":"");if(this._regexCache.has(n))return this._regexCache.get(n);let s;if("string"==typeof t)s=new RegExp("^"+t,e?"y":"");else{let n=t.flags||"";e&&!n.includes("y")&&(n+="y");const r=t.source.replace(/@(\w+)/g,((t,e)=>{const n=this.rules[e];return n instanceof RegExp?n.source:"string"==typeof n?n:""}));s=new RegExp(r,n)}return this._regexCache.set(n,s),s}tokenize(t){const e=[];let n=0;for(;n<t.length;){const{pos:s,matches:r}=this._processState(this.currentState,t,n);r.length?(e.push(...r),n=s):(e.push({text:t[n],token:this.rules.defaultToken}),n++)}return e}_stripPost(t){const e=this.rules.tokenPostfix;return"string"==typeof t&&e&&t.endsWith(e)?t.slice(0,-e.length):t}_makeTok(t,e,n,s){const r={text:t,token:this._stripPost(e)};return n&&(r.embedEnter=n),s&&(r.embedExit=!0),r}_processState(t,e,n){const s=this._compiled[t];if(!s)return{pos:n,matches:[]};for(const t of s){if(t.include){const s=this._processState(t.include,e,n);if(s.matches.length||s.rematch)return s;continue}const{re:s,outSpec:r,nextHint:o}=t;s.lastIndex=n;const i=s.exec(e);if(!i)continue;if(Array.isArray(r)){const t=i[0],e=i.slice(1).map(((t,e)=>{const n=r[e];let s=this.rules.defaultToken,o=null,i=null;return"string"==typeof n?s=n:n&&"object"==typeof n&&(s=n.token||s,n.next&&this._handleNext(n.next),o=n.embedEnter||null,i=!!n.embedExit),this._makeTok(t,s,o,i)}));return{pos:n+t.length,matches:e}}let a=this.rules.defaultToken,l=o,c=null,u=null;if("string"==typeof r)a=r;else if(r&&"object"==typeof r){if(r.token&&(a=r.token),r.cases){let t=r.cases["@default"];for(const[e,n]of Object.entries(r.cases)){const s=this.rules[e.slice(1)];if(e.startsWith("@")&&Array.isArray(s)&&s.includes(i[0])||e===i[0]){t=n;break}}"string"==typeof t?a=t:t&&"object"==typeof t&&(a=t.token||a,t.next&&(l=t.next))}r.next&&(l=r.next),c=r.embedEnter||null,u=!!r.embedExit}if("string"==typeof l&&this._handleNext(l),"delimiter.bracket"===a){let t;/^[\{\(\[]$/.test(i[0])?(t=this.bracketDepth%6+1,this.bracketDepth++):(this.bracketDepth=Math.max(0,this.bracketDepth-1),t=this.bracketDepth%6+1),a+=`.level${t}`}return"@rematch"===a?{pos:n,matches:[{text:"",token:this.rules.defaultToken,embedExit:!0}]}:{pos:n+i[0].length,matches:[this._makeTok(i[0],a,c,u)]}}return{pos:n,matches:[]}}_handleNext(t){"@pop"===t?this.popState():t.startsWith("@")?this.pushState(t.slice(1)):this.pushState(t)}}class c{constructor(t){this.langStack=[{lang:t,tk:new l(r(t))}]}_cur(){return this.langStack[this.langStack.length-1]}tokenizeLine(t){const e=[],n=this.langStack;if(n.length>1&&"md"===n[0].lang&&/^\s*(```|~~~)/.test(t)){this.langStack.length=1;return this.langStack[0].tk.popState(),[{text:t,token:"string",lang:"md"}]}if(n.length>1){const{lang:s,tk:r}=this._cur(),o="css"===s?"</style>":"js"===s?"<\/script>":null;if(o&&t.includes(o)){const i=t.indexOf(o);i>0&&r.tokenize(t.slice(0,i)).forEach((t=>e.push({...t,lang:s}))),n.pop();const a=this._cur();return a.tk.tokenize(t.slice(i)).forEach((t=>e.push({...t,lang:a.lang}))),e}}for(const s of this._cur().tk.tokenize(t))if(s.embedEnter){e.push({...s,lang:this._cur().lang});const t=new l(r(s.embedEnter));t.setState("root"),n.push({lang:s.embedEnter,tk:t})}else if(s.embedExit){n.length>1&&n.pop();const t=this._cur().tk;t.setState("root"),t.stateStack=[],t.bracketDepth=0}else e.push({...s,lang:this._cur().lang});return e}setState(t){this._cur().tk.setState(t)}get stateStack(){return this._cur().tk.stateStack}set stateStack(t){this._cur().tk.stateStack=t}get bracketDepth(){return this._cur().tk.bracketDepth}set bracketDepth(t){this._cur().tk.bracketDepth=t}}const u={javascript:"js",typescript:"ts",html:"html",css:"css",python:"py",csharp:"cs",markdown:"md"};class g{constructor(){this.language="txt",this.stateStack=[],this.bracketDepth=0}tokenizeLine(t){return[{text:t,token:null,lang:"txt"}]}setState(t){}}const h={_resetTokenizer(t){t.setState("root"),t.stateStack.length=0,t.bracketDepth=0},init(t,e,n={}){"object"==typeof t&&({source:t,target:e,...n}=t);const s="string"==typeof t?document.querySelector(t):t,r="string"==typeof e?document.querySelector(e):e;if(!s||!r)throw new Error("Invalid source / target");const o={language:"js",debounce:0,...n};let i;o.language=u[o.language]||o.language;try{i=new c(o.language)}catch(t){console.warn(`Language "${o.language}" not registered, falling back to plain text.`),i=new g,o.language="txt"}const l=()=>{this._resetTokenizer(i);const t=s.value.split("\n");let e="";for(const n of t){for(const t of i.tokenizeLine(n))e+=t.token?`<span class="${t.token} ${t.lang}-${t.token}">${a(t.text)}</span>`:a(t.text);e+="\n"}r.innerHTML=`<code class="language-${o.language}">${e}</code>`},h=o.debounce?function(t,e=0){let n;return(...s)=>{clearTimeout(n),n=setTimeout((()=>t(...s)),e)}}(l,o.debounce):l;s.addEventListener("input",h),l()},highlightElement(t="",e={}){const n={language:"js",...e};let s;n.language=u[n.language]||n.language;try{s=new c(n.language)}catch(t){console.warn(`Language "${n.language}" not registered, falling back to plain text.`),s=new g,n.language="txt"}this._resetTokenizer(s);const r=t.split("\n");let o="";for(const t of r){for(const e of s.tokenizeLine(t))o+=e.token?`<span class="${e.token} ${e.lang}-${e.token}">${a(e.text)}</span>`:a(e.text);o+="\n"}return`<code class="language-${n.language}">${o}</code>`},highlightBlock(t,e={}){"string"==typeof t&&(t=document.querySelector(t));const n={language:s(t),...e};let r;n.language=u[n.language]||n.language;try{r=new c(n.language)}catch(t){console.warn(`Language "${n.language}" not registered, falling back to plain text.`),r=new g,n.language="txt"}this._resetTokenizer(r);const o=t.textContent.split("\n");let i="";for(const t of o){for(const e of r.tokenizeLine(t))i+=e.token?`<span class="${e.token} ${e.lang}-${e.token}">${a(e.text)}</span>`:a(e.text);i+="\n"}t.innerHTML=i},highlight(){document.querySelectorAll('pre code[class*="language-"],code[class*="language-"]').forEach((t=>{try{this.highlightBlock(t)}catch(t){console.warn(t)}}))}};function p(){return{defaultToken:"foreground",tokenPostfix:".python",keywords:["del","exec","print","int","float","long","complex","hex","abs","all","any","apply","basestring","bin","bool","buffer","bytearray","callable","chr","classmethod","cmp","coerce","compile","complex","delattr","dict","dir","divmod","enumerate","eval","execfile","file","filter","format","frozenset","getattr","globals","hasattr","hash","help","id","input","intern","isinstance","issubclass","iter","len","locals","list","map","max","memoryview","min","next","object","oct","open","ord","pow","print","property","reversed","range","raw_input","reduce","reload","repr","round","set","setattr","slice","sorted","staticmethod","str","sum","super","tuple","type","unichr","unicode","vars","xrange","zip","__dict__","__methods__","__members__","__class__","__bases__","__name__","__mro__","__subclasses__","__init__","__import__"],brackets:[{open:"{",close:"}",token:"delimiter.curly"},{open:"[",close:"]",token:"delimiter.bracket"},{open:"(",close:")",token:"delimiter.parenthesis"}],tokenizer:{root:[{include:"@whitespace"},{include:"@numbers"},{include:"@strings"},[/[,:;]/,"delimiter"],[/[{}\[\]()]/,"@brackets"],[/\b(?:if|elif|else|for|while|break|continue|return|try|except|finally|raise|with|assert|pass|yield|import|from)\b/,"keyword.flow"],[/\b(?:def|class|lambda|global|as)\b/,"keyword.declaration"],[/\b(?:and|or|not|is|in)\b/,"keyword.operator"],[/@[a-zA-Z_]\w*/,"tag"],[/\b[a-z_]\w*\b(?=\s*[=,\)])/,"identifier"],[/\b[A-Z][a-zA-Z0-9_]*\b/,"type.identifier"],[/\b[a-z_]\w*(?=\s*\()/,"functionName"],[/[a-zA-Z_]\w*/,{cases:{self:"keyword.self","True|False|None":"constant.language","@keywords":"keyword","@default":"identifier"}}]],whitespace:[[/\s+/,"white"],[/#.*/,"comment"],[/'''/,"string","@tripleSingleQuote"],[/"""/,"string","@tripleDoubleQuote"]],endDocString:[[/\\'/,"string"],[/.*'''/,"string","@popall"],[/.*$/,"string"]],endDblDocString:[[/\\"/,"string"],[/.*"""/,"string","@popall"],[/.*$/,"string"]],numbers:[[/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/,"number.hex"],[/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/,"number"]],strings:[[/'''/,"string","@tripleSingleQuote"],[/"""/,"string","@tripleDoubleQuote"],[/'([^'\\]|\\.)*'/,"string"],[/"([^"\\]|\\.)*"/,"string"],[/'/,"string","@stringBody"],[/"/,"string","@dblStringBody"]],stringBody:[[/[^\\']+$/,"string","@popall"],[/[^\\']+/,"string"],[/\\./,"string"],[/'/,"string.escape","@popall"],[/\\$/,"string"]],dblStringBody:[[/[^\\"]+$/,"string","@popall"],[/[^\\"]+/,"string"],[/\\./,"string"],[/"/,"string.escape","@popall"],[/\\$/,"string"]],tripleSingleQuote:[[/.*?'''/,"string","@pop"],[/.*$/,"string"]],tripleDoubleQuote:[[/.*?"""/,"string","@pop"],[/.*$/,"string"]]}}}var d,f;window.addEventListener("DOMContentLoaded",(()=>h.highlight())),d="py",f=p,n.set(d,f),"undefined"==typeof window||window.CodeDye||(window.CodeDye=h),t.getPyRules=p,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=codedye.py.umd.js.map
